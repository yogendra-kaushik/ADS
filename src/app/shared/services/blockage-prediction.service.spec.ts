/* tslint:disable:no-unused-variable */

import { TestBed, async, inject } from '@angular/core/testing';
import { HttpModule, ResponseOptions, Response, Http, BaseRequestOptions, RequestMethod } from '@angular/http';
import { MockBackend, MockConnection } from '@angular/http/testing';

import { HttpClient } from './http-client';
import { BlockagePredictionService } from './blockage-prediction.service';
import { AuthService } from 'app/shared/services/auth.service';
import { AdalService } from 'ng2-adal/services/adal.service';
import { BlockagePrediction } from 'app/shared/models/blockage-prediction';
import { MaterialModule } from '@angular/material';

describe('BlockagePredictionService', () => {
  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpModule, MaterialModule ],
      providers: [BlockagePredictionService, HttpClient, AuthService, AdalService, {
        provide: Http, HttpClient,
        useFactory: (mockBackend, options) => {
          return new Http(mockBackend, options);
        },
        deps: [MockBackend, BaseRequestOptions]
      },
        MockBackend,
        BaseRequestOptions
      ]
    });
  });

  it('should ...', inject([BlockagePredictionService], (service: BlockagePredictionService) => {
    expect(service).toBeTruthy();
  }));

  it('should return an Observable<Array<BlockagePrediction>',
    inject([BlockagePredictionService, MockBackend], (blockagePredictionService, mockBackend) => {
      let customerId = 34;
      const mockResponse = [{
        'locationId': 11,
        'locationName': 'MF09B',
        'bpScore': 1.9799,
        'bpFlag': true,
        'date': '2017-03-09T00:00:00',
        // tslint:disable-next-line:max-line-length
        'depthTrend': [8.620806, 8.248213, 7.88509035, 7.715941, 7.544429, 7.54921865, 8.010466, 8.754979, 9.191782, 8.98924351, 8.826469, 8.785142, 8.748255, 8.646044, 8.496435, 8.416784, 8.406866, 8.515453, 8.610418, 8.941904, 9.099709, 9.204126, 9.303988, 8.893669, 8.477526, 8.127765, 7.80259466, 7.50112438, 7.37991047, 7.4910965, 7.97143936, 8.759753, 9.107646, 9.023667, 8.807067, 8.771606, 8.68509, 8.587768, 8.610853, 8.566975, 8.514176, 8.505382, 8.530026, 8.64325, 8.737888, 8.703488, 8.695938, 8.693569, 8.501905, 8.201872, 8.017153, 7.85639429, 7.70660067, 7.657942, 7.70401955, 8.039276, 8.631943, 9.05198, 9.348114, 9.542104, 9.402879, 9.302227, 9.224458, 9.086479, 9.00086, 8.91191, 8.966206, 8.968912, 8.960419, 8.893357, 8.71871, 8.617102, 8.389524, 8.156005, 7.84769726, 7.63879442, 7.4567194, 7.372287, 7.370716, 7.60578346, 8.24301052, 8.830061, 9.213668, 9.351736, 9.329978, 9.258807, 9.162524, 9.040769, 8.966574, 8.910611, 8.926358, 9.131857, 9.218608, 9.338379, 9.18213749, 8.858677, 8.510626, 8.2055, 7.73159456, 7.51242876, 7.4117856, 7.477183, 7.90242767, 8.637859, 9.028778, 8.85478, 8.760326, 8.770002, 8.744544, 8.692425, 8.623808, 8.493446, 8.4443, 8.542588, 8.640117, 8.986761, 9.188379, 9.244903, 9.173655, 8.816964, 8.369755, 8.028312, 7.64112663, 7.379924, 7.26727724, 7.304308, 7.808915, 8.54276848, 9.008344, 8.791613, 8.634539, 8.724039, 9.440037, 9.615471, 9.690333, 9.768874, 9.91304, 10.0529232, 10.1902647, 10.528162, 10.685133, 10.7120428, 10.755868, 10.5400219, 10.1862106, 9.838796, 9.545442, 9.347002, 9.281263, 9.30357, 9.672392, 10.3063459, 10.8361683, 11.2607441, 12.3557873, 13.8315763, 14.69202, 14.7117443, 14.7643824, 14.2213974, 14.1198378, 14.0435905, 14.0760107, 14.05134, 14.3028259, 13.9634686, 13.8742867, 13.60808, 13.0473995, 12.346941, 12.2042027, 12.00424, 11.8757048, 11.8685074, 12.3532448, 13.105298, 13.4546928, 13.0607672, 13.0607214, 12.8991718, 12.83706, 12.6490993, 12.417654, 12.2863331, 12.038269, 12.1166191, 12.1879969, 12.5111084, 12.5306854, 12.2456284, 12.0134058, 11.6813774, 11.2385349, 10.8741589, 10.4883795, 10.4212255, 10.3765554, 10.4420195, 10.7995281, 11.4849634, 11.730237, 11.5020514, 11.3433609, 11.15893, 11.0220356, 10.953186, 10.8699026, 10.7003336, 10.6644287, 10.7556028, 10.85883, 10.9625721, 10.9145947, 10.8833981, 10.8367958, 10.6650953, 10.4371052, 10.22565, 10.0441523, 9.885006, 9.762785, 9.715197, 9.775272, 9.995728, 10.5068521, 10.87026, 11.038825, 11.0948076, 11.0211611, 10.7930794, 10.7612314, 10.6377745, 10.56448, 10.4151258, 10.3712168, 10.4691563, 10.4595871, 10.3249207, 10.2432165, 10.1482325, 9.957261, 9.766428, 9.600178, 9.444731, 9.36482048, 9.29851, 9.295287, 9.554512, 9.909315, 10.3056412, 10.7025509, 10.7600155, 10.5004673, 10.4695635, 10.3799543, 10.2671556, 10.2016811, 10.2108526, 10.3451052, 10.3603334, 10.4263735, 10.4061251, 10.3511839, 9.992864, 9.674073, 9.388073, 9.148093, 8.998812, 8.913663, 8.954763, 9.311951, 9.869815, 10.0259924, 9.809504, 9.765628, 9.949458, 10.5611162, 10.3942547, 10.1046619, 9.986936, 9.88851452, 9.95375252, 10.0276356, 10.2338543, 10.455411, 10.4461021, 10.2304487, 9.997794, 9.678372, 9.322302, 9.047462, 8.896534, 8.785418, 8.814669, 9.22538, 9.841763, 10.0562391, 9.97121, 9.888864, 9.913523, 10.1026754, 10.5162163, 10.8150978, 10.8790665, 10.7909594, 10.8856173, 11.03276, 11.2238274, 11.4426117, 11.5038214, 11.2707777, 11.000802, 10.6124439, 10.2859106, 10.138607, 9.986668, 9.8959465, 9.960403, 10.3153887, 11.0438986, 11.1806469, 10.982069, 10.9201736, 10.8507919, 10.6915474, 10.6860313, 10.7278595, 10.5348816, 10.5104961, 10.6154194, 10.6888371, 10.9170685, 11.0058994, 11.0717144, 11.01391, 10.70109],
        'bpFlagTrend': [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
      }];
      mockBackend.connections.subscribe((connection) => {
        connection.mockRespond(new Response(new ResponseOptions({
          body: JSON.stringify(mockResponse)
        })));
      });
      // make the fake call
      blockagePredictionService.getBlockagePrediction(customerId).subscribe((bpResponse) => {
        expect(bpResponse.length).toBe(1);
        expect(bpResponse[0].locationId).toBe(11);
        expect(bpResponse[0].locationName).toBe('MF09B');
        expect(bpResponse[0].bpScore).toBe(1.9799);
        expect(bpResponse[0].bpFlag).toBe(true);
        expect(bpResponse[0].date).toBe('2017-03-09T00:00:00');
        expect(bpResponse[0].bpFlagTrend.length).toBe(14);
      });
    }));
});

